Process Matching with Unlabeled Data
====================================

Pypm predicts the best alignment of a process with multi-dimensional
data. We say that data is *unlabeled* when the features in the data do
*not* directly correspond to the resources used in the process model.
In this case, pypm supports a two stage analysis of the data:

1. Determine a mapping of features to resources that maximizes an
   information score associated with process matching predictions.

2. Use the mapping of features to resources to predict the schedule of
   process activities that best aligns with the resource signal
   derived from this mapping.

Note that the second stage of this analysis involves process matching
with labeled data.  Pypm finds the mapping of features to resources
using a `tabu search <https://en.wikipedia.org/wiki/Tabu_search>`_
optimizer.  Tabu search iteratively identifies candidate mappings that
are evaluated by

a. Labeling the observation data with the mapping, 
b. Optimizing the schedule with the labeled data, and
c. Evaluating the alignment of the schedule to the labeled data using a `separation score`.

The separation score differs from the matching objective used to predict
the schedule.  It uses the predicted schedule to assess whether scheduled
time steps have higher values than unscheduled time steps.  Thus, the
separation score reflects whether the mapping predicts a labeling that
has a strong signal for the process.


Unlabeled Observations
----------------------

For example, consider the following excerpt of CSV data from the file
``unlabeled.csv``.  Each row in the file defines the observations
associated with the features ``AB``, ``AC``, through ``DE`` at a specific date-time.
The values of each observations are assumed to lie in the interval
[0,1]. Zero indicates no observation of a resource, one indicates an
observation of a resource, and values in-between reflect a weighted
observation.

.. literalinclude:: ../pypm/tests/t101/unlabeled.csv
    :lines: 1-30

The file ``unlabeled.csv`` is the maximum value of the pairwise columns 
in ``data.csv``, with some noisy values added 20% of the time.  Thus, none of these
data columns directly corresponds to the original data.


A Simple Example
----------------

The following script illustrates a simple use of the pypm API:

.. code-block::

    # Create the pypm solver for process matching with unlabeled data
    >>> pm = PYPM.tabu_labeling()

    # Load options from a YAML configuration file, including
    # the specification of the observations
    >>> pm.load_config("config.yaml")

    # Generate a mapping of features to resources
    >>> results = pm.generate_labeling_and_schedule()

    # Save labels to a CSV file
    >>> results.write_labels("labels.csv")

    # Save results to a YAML file, including the best schedule associated with the mapping
    >>> results.write("results.yaml")

The configuration file supports a variety of customizations for tabu
search.  For example, the following configuration file stops tabu search
after 200 iterations or when 10 iterations generate the same best solution
value.  Several tabu search representations are used in pypm to structure
the search process. The ``resource_feature_list`` is recommended because
it supports resource-feature constraints (see below).

.. literalinclude:: ../pypm/tests/t101/config.yaml

Note that the configuration file also includes options for process
matching with labeled data.  These options configure the process matching
optimization that is done for each mapping generated by tabu search.
We recommend the ``UnrestrictedMatches_FixedLengthActivities`` model
because this models solves more quickly than other matching models.

The CSV labels file shows which features are associated with each resource:

.. literalinclude:: ../pypm/tests/t101/labels.csv


The YAML results file includes additional detail regarding this mapping,
along with a description of the predicted schedule.  For example:

.. literalinclude:: ../pypm/tests/t101/baseline.yaml

It is often desirable to generate labeled data using the mapping.
Pypm supports this functionality with the following script:

.. code-block::

    # Import the labeling function
    >>> from pypm.util import label_data

    # Generate labeled data using the mapping generated by tabu search
    >>> label_data(feature_label_csvfile='./labeled.csv',
                        process_yamlfile='./process.yaml',
                        obs_csvfile='./unlabeled.csv')

For context, here are the first lines of labeled data generated here:

.. literalinclude:: ../pypm/tests/t101/labeled.csv
    :lines: 1-30

